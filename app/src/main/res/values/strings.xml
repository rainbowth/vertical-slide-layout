<resources>
    <string name="app_name">App</string>
    <string name="text">有点意思的是这个ViewGroup的事件分发处理(以下为了方便，我把从上到下的第一个子View称为第一页，第二个子View称为第二页)：

无论何时，这个自定义的ViewGroup都不要拦截水平方向的move事件；
对于第一页来说，滑动到最底部时，ViewGroup才开始拦截向上拉的事件；
对于第二页来说，滑动到最顶端时，ViewGroup才开始拦截向下拉的事件；
对于第一页或第二页来说，在手指没有离开屏幕，也就是持续拦截到move事件时，View应当随手势进行滚动；
对于第一页或第二页来说，手指离开屏幕时，判断之前移动了多少，达到一个阈值的话，默认切到另外一页
基本上，抓住这五点，这个自定义ViewGroup的事件处理基本就搞定了。接下来就是代码实现啦。有点意思的是这个ViewGroup的事件分发处理(以下为了方便，我把从上到下的第一个子View称为第一页，第二个子View称为第二页)：
何时，这个自定义的ViewGroup都不要拦截水平方向的move事件；
对于第一页来说，滑动到最底部时，ViewGroup才开始拦截向上拉的事件；
对于第二页来说，滑动到最顶端时，ViewGroup才开始拦截向下拉的事件；
对于第一页或第二页来说，在手指没有离开屏幕，也就是持续拦截到move事件时，View应当随手势进行滚动；
对于第一页或第二页来说，手指离开屏幕时，判断之前移动了多少，达到一个阈值的
无论何时，这个自定义的ViewGroup都不要拦截水平方向的move事件；
对于第一页来说，滑动到最底部时，ViewGroup才开始拦截向上拉的事件；
对于第二页来说，滑动到最顶端时，ViewGroup才开始拦截向下拉的事件；
对于第一页或第二页来说，在手指没有离开屏幕，也就是持续拦截到move事件时，View应当随手势进行滚动；
对于第一页或第二页来说，手指离开屏幕时，判断之前移动了多少，达到一个阈值的话，默认切到另外一页
基本上，抓住这五点，这个自定义ViewGroup的事件处理基本就搞定了。接下来就是代码实现啦。重写onI重写onInterceptTouchEvent方法去决定啥时候要拦截事件，重写onTouchEvent方法去在ViewGroup要拦截的时候确定到底怎么使用这个事件。

总体来说，还是很简单的一个自定义View，实现起来也不难。当然实现的过程中也有一些细节需要考虑，比如：手指抬起时要平滑的切到下一页，再比如在两页切换的时候开放接口给外界，方便处理业务逻辑等。
    </string>
</resources>
